Server protocol.

A FILENAME matches [-_a-zA-Z0-9.]+
A USER-ID matches [a-zA-Z0-9]+
A PASSWD matches [-_.!~*'()a-zA-Z0-9]+ before decoding (it is uriComponent-encoded) [v1 only]
A PARAMETERS matches [-_.!~*'()a-zA-Z0-9]+ before decoding (it is uriComponent-encoded)

For protocol version 2+, HTTP authentication is used.

GET /r/FILENAME              [protocol version 1+]
  Respond 200 OK with the named file if it exists.
  Note, this is for static resources.

GET /plot/USER-ID/PARAMETERS [protocol version 2+]
  Respond 401 if the user+password are wrong or user does not exist.
  Respond 200 OK with the plot as HTML payload if possible.
  When decoded, PARAMETERS must match a spec TBD.

  Trips are plotted together with different colors and all relevant
  waypoints.

GET /summary/USER-ID        [protocol version 2+]
  Respond 401 if the user+password are wrong or user does not exist.
  Respond 200 OK with the summary for the user (basically HTML+JS).

POST /trail/USER-ID/PASSWD  [protocol version 1 only]
POST /trail/USER-ID         [protocol version 2+]
  Payload: the contents of the trail, a JSON object as outlined in
    spec.txt, notably with a UUID field.
  Respond 401 if the user+password are wrong or user does not exist.
  Respond 409 Conflict if a record with the UUID of the datum already
    exists in the database.
  Otherwise create a new trail for the user and respond 201 Created
    with a JSON-encoded object { UUID: <uuid> } <uuid> is the input
    uuid.



Files are stored in the directory data/USER-ID

  summary.json contains summary data

  waypoints.json contains waypoint data for the user

  <date>-<uuid>.json where date is yyyymmddhhmmss and uuid is a 16-hex-digit
    (uppercase only) UUID value (found in the file) is a trail.

summary.json version 1 [draft status]

  { version: 1,
    data: [ { start: number,
              file: string,
              type: string,
              label: string,
              comment: string,
              distance: number,
              time: number,
              waypoints: [string, ...] }, ... ] }

  where distance is in meters and time in seconds.  The label and
  comment are user-assigned values (default nothing), and the type
  is standardized, see below.  Waypoints (within a trip) is the set
  of waypoints that were found to be touched by the trip when the
  trip data were last processed.  Waypoints (overall) is the
  complete set of waypoints for this user.

waypoints.json version 1:
  { version: 1,
    waypoints: { "waypoint name": { name: string, lat: number, lon: number } } }

<date>-<uuid>.json version 1:

  { version: 1,
    id: string,
    device: string,
    start: number,
    end: number,
    distance: number,
    waypoints: [ { name: string, lat: number, lon: number }, ... ],
    readings: [[lat,lon], ...] }

  id is a nonempty string of hex digits.
  timestamps are positive integers (milliseconds since JS epoch).
  distance is a positive number.
  waypoints is optional, backported from version 2.
  
<date>-<uuid>.json version 2 (Note incompatible change from "id" to "uuid" and
  change in meaning of "device")

  { version: 2,
    uuid: string,
    device: { name: string, hardware: string, os: string, ua: string },
    start: number,
    end: number,
    distance: number,
    waypoints: [ { name: string, lat: number, lon: number }, ... ],
    type: string,
    readings: [[lat,lon,delta], ...] }

  Valid values for "type" are "bike", "ski", "hike", "other".
  Delta is the delta between the time of the observation and the start time.
  Values of device are best effort, empty string if no data available.  The
    purpose is to allow values originating on specific devices or software
    to be tracked over time, in case future adjustments need to be made
    or if specific devices are found to be faulty in some way.
  uuid is length 16, hex digits, upper case required.
  waypoints are new waypoints this trip, uniqueness is not required here.
